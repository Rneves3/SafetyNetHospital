class hospitalNetwork
types
values
-- TODO Define values here
instance variables
public hospitals: set of Hospital := {};
public doctors: set of Doctor := {};
public appointments: set of Appointment := {};
operations

public hospitalNetwork: () ==> hospitalNetwork
hospitalNetwork() == return self;

public getHospitals: () ==> set of Hospital
getHospitals() == return hospitals;

public getDoctors: () ==> set of Doctor
getDoctors() == return doctors;

public getAppointments: () ==> set of Appointment
getAppointments() == return appointments;

public addDoctors: Doctor ==> ()
addDoctors(d) == doctors := doctors union{d}
pre d not in set doctors
post doctors = doctors~ union {d};

public addHospital: Hospital ==> ()
addHospital(h) == hospitals := hospitals union{h}
pre h not in set hospitals
post hospitals = hospitals~ union {h};

public addAppointments: Appointment ==> ()
addAppointments(a) == appointments := appointments union{a}
pre a not in set appointments
post appointments = appointments~ union {a};

public getHospitalDocs: Hospital ==> set of Doctor
		getHospitalDocs(hosp) == (
			return hosp.doctors;
		)
		pre hosp in set hospitals;	

public getDocsMultipleHospitals: () ==> set of Doctor
getDocsMultipleHospitals()==(
		dcl docs: set of set of Doctor:= {};
		dcl result: set of Doctor:= {};
		dcl intersect: set of Doctor:= {};
		for all h in set hospitals do ( -- for each hospital
				docs:= docs union {h.doctors}; 
			); 
			for all setDocs in set docs do ( -- for each hospital
				intersect:= {};
				for all setDocsPrime in set docs\{setDocs} do (
					intersect:= setDocs inter setDocsPrime;
					if intersect <> {} then result:= result union intersect;
				);  
			); 
			return result;
		);
		
public getHospitalMostAppointments: () ==> Hospital	
		getHospitalMostAppointments()==(
			dcl hosp: Hospital;
			dcl max: nat := 0;
			
			for all h in set hospitals do (
				if card h.appointments > max then (
					hosp := h;
					max := card h.appointments;
				);
			);
			return hosp;
		);
		
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end hospitalNetwork